import React, { useState } from 'react';
import useQueryNews from '../hooks/useQueryNews'; // Adjust the import path as necessary
import { Style } from '../../../components/icon/material-icons';
import styles from '../styles/SpeechList.module.css'; // Adjust the import path as necessary

interface SpeechRecommendation {
    id: number;
    content: string;
}

const SpeechList: React.FC = () => {
    const [recommendation, setRecommendation] = useState<SpeechRecommendation | null>(null);
    const [loading, setLoading] = useState(false);
    //run hooks useQuerySpeech to fetch speech data
    const dataNews = useQueryNews();
    let dataFinal = ""
    if (dataNews !== undefined) {
            dataFinal = dataNews?.data
    }

    const regenerateRecommendation = async () => {
        setLoading(true);
        try {
            // Simulate API call to fetch new AI-generated speech content
            const response = await new Promise<SpeechRecommendation>((resolve) =>
                setTimeout(() => {
                    // Mock response data
                    // get data from useQuerySpeech
                    const speechContent = dataFinal || "This is a sample news generated by AI.";
                    // For demonstration, we will use a static content
                    // In a real application, you would replace this with the actual API call
                    resolve({
                        id: Date.now(),
                        content: speechContent,
                    });
                }, 10000)
            );
            setRecommendation(response);
        } catch (error) {
            console.error('Failed to regenerate recommendation:', error);
        } finally {
            setLoading(false);
        }
    };

    const formatContent = (content: string) => {
        //find \n\n---\n\n , and remove content before it
        const separatorIndex = content.indexOf('\n\n\n\n**');
        if (separatorIndex !== -1) {
            content = content.substring(separatorIndex + 2); // +5 to skip the separator itself
        }
        //make links clickable after (https:// or http://)
        content = content.replace(/(https?:\/\/[^\s]+)/g, '<a href="$1" target="_blank" rel="noopener noreferrer">$1</a>');
        
        //content = content.replace(/\*\*/g, '');
        //add bold as a title after ** and before **, and remove the ** itself
        content = content.replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>');
        // Replace ** with <br /> for line breaks
        // This is a simple replacement, you can enhance it further if needed
        //content = content.replace(/\n/g, '<br />');        
        return content;
    };

    return (
        <div style={{ padding: '20px', fontFamily: 'Arial, sans-serif' }}>
            <h1>Generate News Update</h1>
            <p>Generate a daily AI-powered speech recommendation for your constituents.</p>
            <button onClick={regenerateRecommendation} disabled={loading}>
                {loading ? 'Generating...' : 'Regenerate Recommendation'}
            </button>            
            <hr />
            {recommendation && (
                <div className={styles['response-container']}>
                    <h2>Berita Hari ini</h2>
                    <p
                        className={styles['response-content']}
                        dangerouslySetInnerHTML={{
                            __html: formatContent(recommendation.content),
                        }}
                    ></p>
                    <p className={styles['response-footer']}>(Generated by AI)</p>
                </div>
            )}
        </div>
    );
};


export default SpeechList;